let inspect = (() => {
  var _ref = _asyncToGenerator(function* (deck) {
    const learningStrategy = yield LearningStrategy.fromDeckName(deck);

    console.log('High Priority Queue');
    const hpqContents = yield learningStrategy.hpq.peekAll();
    hpqContents.forEach(function ({ card, correctCount }, index) {
      const rendered = learningStrategy.CardRenderer.renderVariant(card, 'english');
      console.log(`  ${index + 1}.\tscore: ${correctCount}\t${rendered.sideA}`);
    });

    console.log();

    console.log('Low Priority Queue');
    const lpqContents = yield learningStrategy.lpq.peekAll();
    lpqContents.forEach(function ({ card, correctCount }, index) {
      const rendered = learningStrategy.CardRenderer.renderVariant(card, 'english');
      console.log(`  ${index + 1}.\tscore: ${correctCount}\t${rendered.sideA}`);
    });

    console.log();

    console.log('Backlog');
    const backlogContents = yield learningStrategy.backlog.peekAll();
    backlogContents.slice(0, BACKLOG_MAX_ITEMS_SHOWN).forEach(function ({ card, correctCount }, index) {
      const rendered = learningStrategy.CardRenderer.renderVariant(card, 'english');
      console.log(`  ${index + 1}.\tscore: ${correctCount}\t${rendered.sideA}`);
    });
    if (backlogContents.length > BACKLOG_MAX_ITEMS_SHOWN) {
      console.log('...');
    }

    console.log();

    console.log('Done');
    const doneContents = yield learningStrategy.done.peekAll();
    if (!doneContents.length) {
      console.log('empty');
    } else {
      doneContents.forEach(function ({ card, correctCount }, index) {
        const rendered = learningStrategy.CardRenderer.renderVariant(card, 'english');
        console.log(`  ${index + 1}.\tscore: ${correctCount}\t${rendered.sideA}`);
      });
    }
  });

  return function inspect(_x) {
    return _ref.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const LearningStrategy = require('../../lib/learning-strategy');
const BACKLOG_MAX_ITEMS_SHOWN = 10;

module.exports = {
  command: 'inspect',
  desc: 'Inspect the cards you\'re learning',
  builder: {
    deck: {
      describe: 'Specify a deck of flashcards to inspect',
      choices: ['spanish-vocabulary']
    }
  },
  handler: ({ deck }) => inspect(deck)
};