let practiceDeck = (() => {
  var _ref = _asyncToGenerator(function* (deck) {
    const learningStrategy = yield LearningStrategy.fromDeckName(deck);
    const card = yield learningStrategy.getNextCard();
    if (card) {
      const { id, sideA, sideB } = card;
      rl.question(`${sideA}`);
      console.log(`${sideB}`);
      const answer = rl.question('Did you get it correct (y/n)? ');
      const correct = answer === 'y';
      learningStrategy.submitCard(id, correct, function () {
        return process.exit();
      });
    } else {
      console.log(`Looks like there are no cards to study in ${deck}`);
    }
  });

  return function practiceDeck(_x) {
    return _ref.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const rl = require('readline-sync');
const LearningStrategy = require('../../lib/learning-strategy');

module.exports = {
  command: 'practice',
  desc: 'Practice flashcards',
  builder: {
    deck: {
      describe: 'Specify a deck(s) of flashcards to practice',
      choices: ['spanish-vocabulary']
    }
  },
  handler: ({ deck }) => practiceDeck(deck)
};