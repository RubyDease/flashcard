function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const ArrayQueue = require('../array-queue');

class AsyncArrayQueue {

  constructor(queue) {
    this._queue = new ArrayQueue(queue);
  }

  static initialize(queue) {
    var _this = this;

    return _asyncToGenerator(function* () {
      return new _this(queue);
    })();
  }

  getLength() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      return _this2._queue.getLength();
    })();
  }

  peek() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      return _this3._queue.peek();
    })();
  }

  enqueue(item) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      return _this4._queue.enqueue(item);
    })();
  }

  dequeue() {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      return _this5._queue.dequeue();
    })();
  }

  remove(callback) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      return _this6._queue.remove(callback);
    })();
  }

}

module.exports = AsyncArrayQueue;