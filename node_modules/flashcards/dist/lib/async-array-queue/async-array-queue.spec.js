function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const expect = require('expect');
const Queue = require('./');

describe('async-array-queue', _asyncToGenerator(function* () {
  it('has a length of 0 when there are 0 items', _asyncToGenerator(function* () {
    const queue = yield Queue.initialize();
    expect((yield queue.getLength())).toBe(0);
  }));

  it('has a length of 1 when instantiated with 1 item', _asyncToGenerator(function* () {
    const queue = yield Queue.initialize(['foo']);
    expect((yield queue.getLength())).toBe(1);
  }));

  it('peek throws an error when the queue is empty', _asyncToGenerator(function* () {
    const queue = yield Queue.initialize();
    let error;
    try {
      yield queue.peek();
    } catch (e) {
      error = e;
    }
    expect(error).toBeTruthy();
  }));

  it('can peek the first item', _asyncToGenerator(function* () {
    const item = 'foo';
    const queue = yield Queue.initialize([item]);
    expect((yield queue.peek())).toBe(item);
  }));

  it('enqueues the item to the back of the queue', _asyncToGenerator(function* () {
    const item = 'foo';
    const queue = yield Queue.initialize();
    queue.enqueue(item);
    expect((yield queue.peek())).toBe(item);
  }));

  it('removes the item', _asyncToGenerator(function* () {
    const item = 'foo';
    const queue = yield Queue.initialize([item]);
    const removed = yield queue.remove(function (queueItem) {
      return queueItem === item;
    });
    expect(removed).toEqual([item]);
    expect((yield queue.getLength())).toBe(0);
  }));

  it('returns an empty array when removing a non existing item', _asyncToGenerator(function* () {
    const queue = yield Queue.initialize();
    const removed = yield queue.remove(function (queueItem) {
      return queueItem === 'does not exist';
    });
    expect(removed).toEqual([]);
  }));

  it('can remove more than one item at a time', _asyncToGenerator(function* () {
    const item = 'foo';
    const queue = yield Queue.initialize([item, item]);
    const removed = yield queue.remove(function (queueItem) {
      return queueItem === item;
    });
    expect(removed).toEqual([item, item]);
  }));

  it('dequeues the longest lived item', _asyncToGenerator(function* () {
    const item = 'foo';
    const queue = yield Queue.initialize([item]);
    expect((yield queue.dequeue())).toBe(item);
    expect((yield queue.getLength())).toBe(0);
  }));
}));