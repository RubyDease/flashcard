function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require('path');
const storeDir = require('../store-dir-util').get();
const PouchDB = require('pouchdb');
PouchDB.plugin(require('pouchdb-upsert'));
const DB = require('../level-db-wrapper');

const LOADED_KEY = 'LOADED_KEY';

class AsyncDeckLoader {
  // TODO: make a Persistor interface

  constructor(name, Persistor) {
    this.name = name;
    this.dbLocation = path.join(storeDir, this.name);
    this.storage = Persistor ? new Persistor(this.name) : new DB(this.dbLocation);
  }

  isLoaded() {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        return yield _this.storage.get(LOADED_KEY);
      } catch (e) {
        // TODO: maybe only return false for certain types of errors?
        return false;
      }
    })();
  }

  setLoaded(state) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      return _this2.storage.put(LOADED_KEY, state);
    })();
  }

  load(args = {}) {
    const dirPath = args.path ? args.path : path.join(__dirname, '../../decks/decks/');
    const deckPath = path.resolve(dirPath, this.name);
    return require(deckPath);
  }

  getCardRenderer(args = {}) {
    const dirPath = args.path ? args.path : path.join(__dirname, '../../decks/decks/');
    const deckPath = path.resolve(dirPath, this.name, 'card-renderer');
    try {
      return require(deckPath);
    } catch (e) {
      return undefined;
    }
  }

  getStorage() {
    return this.storage;
  }
}

module.exports = AsyncDeckLoader;