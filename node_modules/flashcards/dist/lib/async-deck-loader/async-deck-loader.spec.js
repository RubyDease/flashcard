var _this = this;

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const AsyncDeckLoader = require('./');
const expect = require('expect');
const path = require('path');
const DB = require('../level-db-wrapper');
class InMemoryPersistor extends DB {
  constructor(name) {
    super(name, { adapter: 'memory' });
  }
}

describe('async-deck-loader', () => {
  describe('unit', () => {
    beforeEach(() => {
      _this.deckLoader = new AsyncDeckLoader('deckName', InMemoryPersistor);
    });

    it('isLoaded returns false when deck is not loaded', _asyncToGenerator(function* () {
      expect((yield _this.deckLoader.isLoaded())).toBe(false);
    }));

    it('can set loaded to true', _asyncToGenerator(function* () {
      yield _this.deckLoader.setLoaded(true);
      expect((yield _this.deckLoader.isLoaded())).toBe(true);
    }));

    it('can set loaded to false', _asyncToGenerator(function* () {
      yield _this.deckLoader.setLoaded(true);
      yield _this.deckLoader.setLoaded(false);
      expect((yield _this.deckLoader.isLoaded())).toBe(false);
    }));
  });

  describe('integration', () => {
    it('can load a deck from the file system', _asyncToGenerator(function* () {
      // the name of the deck is 'fixtures'
      // so we load from the fixtures directory
      const deckLoader = new AsyncDeckLoader('fixtures', InMemoryPersistor);
      const deck = require('./test-data/fixtures');
      const loadedDeck = yield deckLoader.load({
        path: path.join(__dirname, 'test-data')
      });

      expect(loadedDeck).toEqual(deck);
    }));

    it('can load a card renderer module from the file system', _asyncToGenerator(function* () {
      // the name of the deck is 'test-data'
      // and we're going to load the card-renderer
      const deckLoader = new AsyncDeckLoader('test-data', InMemoryPersistor);
      const CardRenderer = require('./test-data/card-renderer');
      const LoadedCardRenderer = yield deckLoader.getCardRenderer({
        path: __dirname
      });

      expect(LoadedCardRenderer).toEqual(CardRenderer);
    }));
  });
});