function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const levelup = require('levelup');
const promisify = require('q-level');

class LevelDBWrapper {

  constructor(location, options = {}) {
    if (!location) {
      throw new Error('Argument `location: string` is required!');
    }

    this.location = location;
    this.adapter = options.adapter;

    this.dbConfig = {
      valueEncoding: 'json',
      db: this.adapter === 'memory' ? require('memdown') : require('leveldown')
    };

    this.db = promisify(levelup(this.location, this.dbConfig));
  }

  get(key) {
    var _this = this;

    return _asyncToGenerator(function* () {
      return _this.db.get(key);
    })();
  }

  put(key, value) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      return _this2.db.put(key, value);
    })();
  }

  destroy() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      if (_this3.adapter === 'memory') {
        return _this3.dbConfig.db.clearGlobalStore(true);
      }

      return new Promise(function (resolve, reject) {
        _this3.dbConfig.db.destroy(_this3.location, function (err) {
          if (err) reject(err);
          resolve();
        });
      });
    })();
  }
}

module.exports = LevelDBWrapper;