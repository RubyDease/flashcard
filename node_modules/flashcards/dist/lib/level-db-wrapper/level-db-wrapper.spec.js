function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const DB = require('./');
const expect = require('expect');

describe('level-db-wrapper', function () {
  beforeEach(function () {
    const location = './mydb';
    const options = { adapter: 'memory' };
    this.db = new DB(location, options);
  });

  afterEach(function () {
    return this.db.destroy();
  });

  it('throws an error when getting no existing thing', _asyncToGenerator(function* () {
    let error;
    try {
      yield this.db.get('does not exist');
    } catch (e) {
      error = e;
    }

    expect(error).toBeTruthy();
  }));

  it('can put', _asyncToGenerator(function* () {
    const key = 'key';
    const value = 'value';
    yield this.db.put(key, value);
    const got = yield this.db.get(key);

    expect(got).toBe(value);
  }));
});