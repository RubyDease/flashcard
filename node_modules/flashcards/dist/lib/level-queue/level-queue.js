function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class LevelQueue {

  constructor(args) {
    const { db, queueName } = args;

    if (!db || !queueName) {
      throw new Error('Must supply a db and a queueName!');
    }

    this.db = db;
    this.queueName = queueName;
  }

  static initialize(contents = [], options) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const queue = new _this(options);
      yield queue.enqueueMany(contents);
      return queue;
    })();
  }

  getLength() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const queue = yield _this2._retrieveQueueFromStorage();
      return queue.length;
    })();
  }

  peek() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const queue = yield _this3._retrieveQueueFromStorage();
      return queue[0];
    })();
  }

  peekAll() {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      return _this4._retrieveQueueFromStorage();
    })();
  }

  enqueue(item) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      const queue = yield _this5._retrieveQueueFromStorage();
      queue.push(item);
      return _this5.db.put(_this5.queueName, queue);
    })();
  }

  enqueueMany(items) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      const queue = yield _this6._retrieveQueueFromStorage();
      return _this6.db.put(_this6.queueName, queue.concat(items));
    })();
  }

  dequeue() {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      const queue = yield _this7._retrieveQueueFromStorage();
      const dequeued = queue.shift();
      yield _this7.db.put(_this7.queueName, queue);
      return dequeued;
    })();
  }

  remove(callback) {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      let removed = [];
      const queue = yield _this8._retrieveQueueFromStorage();
      removed = queue.filter(callback);
      const remaining = queue.filter(function (item) {
        return !callback(item);
      });
      yield _this8.db.put(_this8.queueName, remaining);
      return removed;
    })();
  }

  destroy() {
    var _this9 = this;

    return _asyncToGenerator(function* () {
      return _this9.db.destroy();
    })();
  }

  _retrieveQueueFromStorage() {
    var _this10 = this;

    return _asyncToGenerator(function* () {
      try {
        return yield _this10.db.get(_this10.queueName);
      } catch (e) {
        return [];
      }
    })();
  }
}


module.exports = LevelQueue;