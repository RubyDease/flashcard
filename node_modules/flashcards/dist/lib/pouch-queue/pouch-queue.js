var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const storeDir = require('../store-dir-util').get();
const PouchDB = require('pouchdb');
PouchDB.plugin(require('pouchdb-upsert'));
if (process.env.NODE_ENV === 'test') {
  PouchDB.plugin(require('pouchdb-adapter-memory'));
}
const DB = PouchDB.defaults({
  prefix: storeDir
});

class PouchQueue {

  constructor(args) {
    args = _extends({}, PouchQueue.defaultOptions, args);

    const { dbName, queueName, options = {} } = args;
    this.db = new DB(dbName, options);
    this.queueName = queueName;
  }

  static initialize(contents = [], options = {}) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const queue = new _this(options);
      yield queue.enqueueMany(contents);
      return queue;
    })();
  }

  static defaults(defaultOptions = {}) {
    this.defaultOptions = defaultOptions;
  }

  getLength() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const queue = yield _this2._getQueueFromStorage();
      return queue.length;
    })();
  }

  peek() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const queue = yield _this3._getQueueFromStorage();
      return queue[0];
    })();
  }

  peekAll() {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      return yield _this4._getQueueFromStorage();
    })();
  }

  enqueue(item) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      yield _this5.db.upsert(_this5.queueName, function (doc) {
        if (!doc.queue) {
          doc.queue = [];
        }

        doc.queue.push(item);
        return doc;
      });
    })();
  }

  enqueueMany(items) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      yield _this6.db.upsert(_this6.queueName, function (doc) {
        if (!doc.queue) {
          doc.queue = [];
        }

        doc.queue = doc.queue.concat(items);
        return doc;
      });
    })();
  }

  dequeue() {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      let dequeued;
      yield _this7.db.upsert(_this7.queueName, function (doc) {
        if (!doc.queue) {
          doc.queue = [];
        }

        dequeued = doc.queue.shift();
        return doc;
      });

      return dequeued;
    })();
  }

  destroy() {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      return _this8.db.destroy();
    })();
  }

  remove(callback) {
    var _this9 = this;

    return _asyncToGenerator(function* () {
      let removed = [];
      yield _this9.db.upsert(_this9.queueName, function (doc) {
        if (!doc.queue) {
          doc.queue = [];
        }

        removed = doc.queue.filter(callback);
        doc.queue = doc.queue.filter(function (item) {
          return !callback(item);
        });
        return doc;
      });

      return removed;
    })();
  }

  _getQueueFromStorage() {
    var _this10 = this;

    return _asyncToGenerator(function* () {
      try {
        const { queue } = yield _this10.db.get(_this10.queueName);
        return queue;
      } catch (e) {
        return [];
      }
    })();
  }
}

PouchQueue.defaultOptions = {};

module.exports = PouchQueue;