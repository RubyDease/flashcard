{
  "_args": [
    [
      {
        "raw": "level-manifest@^1.2.0",
        "scope": null,
        "escapedName": "level-manifest",
        "name": "level-manifest",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "/Users/rubydease/flashcard/node_modules/q-level"
    ]
  ],
  "_from": "level-manifest@>=1.2.0 <2.0.0",
  "_id": "level-manifest@1.2.0",
  "_inCache": true,
  "_location": "/level-manifest",
  "_npmUser": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "_npmVersion": "1.3.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "level-manifest@^1.2.0",
    "scope": null,
    "escapedName": "level-manifest",
    "name": "level-manifest",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/q-level"
  ],
  "_resolved": "https://registry.npmjs.org/level-manifest/-/level-manifest-1.2.0.tgz",
  "_shasum": "06200d3a768bfd6b5181b27bfa9b0efcbb06fe55",
  "_shrinkwrap": null,
  "_spec": "level-manifest@^1.2.0",
  "_where": "/Users/rubydease/flashcard/node_modules/q-level",
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "bugs": {
    "url": "https://github.com/dominictarr/level-manifest/issues"
  },
  "dependencies": {
    "deep-extend": "~0.2.5"
  },
  "description": "describe a levelup plugin for remote access",
  "devDependencies": {
    "tape": "~2.3.0"
  },
  "directories": {},
  "dist": {
    "shasum": "06200d3a768bfd6b5181b27bfa9b0efcbb06fe55",
    "tarball": "https://registry.npmjs.org/level-manifest/-/level-manifest-1.2.0.tgz"
  },
  "homepage": "https://github.com/dominictarr/level-manifest",
  "license": "MIT",
  "maintainers": [
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "name": "level-manifest",
  "optionalDependencies": {},
  "readme": "# level-manifest\n\nDescribe the functions that multilevel should provide access to on the client.\n\n[![Build Status](https://travis-ci.org/dominictarr/level-manifest.png?branch=master)](https://travis-ci.org/dominictarr/level-manifest)\n\n## Example\n\nSuppose you implement a levelup plugin that adds some cool new features to a\n[sublevel](https://github.com/dominictarr/level-sublevel)\n\nretrive a js object describing what methods a client protocol should be able\nto access.\n``` js\nvar manifest = require('level-manifest')\n\nvar m = manifest(db)\n```\n\n`manifest` build a tree of sublevels.\n\n``` js\n{\n  methods:   {},\n  sublevels: {\n    foo: {\n      methods: {},\n      sublevels: {}\n    }\n  }\n}\n```\n\nPlugins extending a sublevel should add a `methods` property that describes\nany new methods that can be used by a remote client.\n\nfor example, the default methods are specified like this:\n\n``` js\nvar methods = {\n  createReadStream  : {type: 'readable'},\n  readStream        : {type: 'readable'},\n  createValueStream : {type: 'readable'},\n  valueStream       : {type: 'readable'},\n  createKeyStream   : {type: 'readable'},\n  keyStream         : {type: 'readable'},\n  createWriteStream : {type: 'writable'},\n  writeStream       : {type: 'writable'},\n  isOpen            : {type: 'sync'},\n  isClosed          : {type: 'sync'},\n  put               : {type: 'async'},\n  get               : {type: 'async'},\n  del               : {type: 'async'},\n  batch             : {type: 'async'},\n  approximateSize   : {type: 'async'}\n}\n```\n\n`readable`, and `writable` mean readable or writable streams,\n(use `duplex` for a stream that is both readable and writable.)\n\nA client should also provide support for these types:\n``` js\nvar other = {\n  error        : {type: 'error', message: 'not-supported'},\n  createStream : {type: 'duplex'},\n  nested       : {type: 'object', methods: {get: {type: 'async'}}}\n}\n```\n`error` is used when a method has been disabled.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/level-manifest.git"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "version": "1.2.0"
}
